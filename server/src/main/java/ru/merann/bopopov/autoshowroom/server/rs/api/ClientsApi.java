/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.merann.bopopov.autoshowroom.server.rs.api;

import ru.merann.bopopov.autoshowroom.server.model.Client;
import ru.merann.bopopov.autoshowroom.server.model.Order;
import ru.merann.bopopov.autoshowroom.server.model.OrderRequest;
import ru.merann.bopopov.autoshowroom.server.model.ResultListOrder;
import ru.merann.bopopov.autoshowroom.server.model.Status;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-04-22T12:57:34.238+03:00[Europe/Moscow]")

@Validated
@Api(value = "clients", description = "the clients API")
public interface ClientsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "createNewOrder", notes = "Create a new order in the database", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order was successfully created", response = Order.class),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/clients/{client_id}/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Order> createNewOrder(@ApiParam(value = "Client id",required=true) @PathVariable("client_id") Long clientId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody OrderRequest orderRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"car\" : {    \"options\" : [ {      \"price\" : 65000,      \"name\" : \"Спортивный аэродинамический обвес\",      \"id\" : 3    }, {      \"price\" : 65000,      \"name\" : \"Спортивный аэродинамический обвес\",      \"id\" : 3    } ],    \"model\" : {      \"price\" : 6000000,      \"name\" : \"A8\",      \"id\" : 3,      \"make\" : {        \"name\" : \"Audi\",        \"id\" : 3      }    }  },  \"client\" : {    \"name\" : \"Bogdan\",    \"id\" : 3  },  \"id\" : 4,  \"status\" : \"ACCEPTED\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "deleteOrder", notes = "Delete order from the database", response = Long.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order was successfully removed", response = Long.class) })
    @RequestMapping(value = "/clients/{client_id}/orders/{order_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Long> deleteOrder(@ApiParam(value = "Client id",required=true) @PathVariable("client_id") Long clientId,@ApiParam(value = "Client id",required=true) @PathVariable("order_id") Long orderId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getClientByName", notes = "Get client with name", response = Client.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully get client", response = Client.class) })
    @RequestMapping(value = "/clients/{client_name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Client> getClientByName(@ApiParam(value = "Client name",required=true) @PathVariable("client_name") String clientName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"Bogdan\",  \"id\" : 3}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getOrdersByClient", notes = "Get all orders for client filtering by status", response = ResultListOrder.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully get orders", response = ResultListOrder.class) })
    @RequestMapping(value = "/clients/{client_id}/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResultListOrder> getOrdersByClient(@ApiParam(value = "Client id",required=true) @PathVariable("client_id") Long clientId,@ApiParam(value = "Order status", defaultValue = "null") @Valid @RequestParam(value = "status", required = false, defaultValue="null") Status status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"items\" : [ {    \"car\" : {      \"options\" : [ {        \"price\" : 65000,        \"name\" : \"Спортивный аэродинамический обвес\",        \"id\" : 3      }, {        \"price\" : 65000,        \"name\" : \"Спортивный аэродинамический обвес\",        \"id\" : 3      } ],      \"model\" : {        \"price\" : 6000000,        \"name\" : \"A8\",        \"id\" : 3,        \"make\" : {          \"name\" : \"Audi\",          \"id\" : 3        }      }    },    \"client\" : {      \"name\" : \"Bogdan\",      \"id\" : 3    },    \"id\" : 4,    \"status\" : \"ACCEPTED\"  }, {    \"car\" : {      \"options\" : [ {        \"price\" : 65000,        \"name\" : \"Спортивный аэродинамический обвес\",        \"id\" : 3      }, {        \"price\" : 65000,        \"name\" : \"Спортивный аэродинамический обвес\",        \"id\" : 3      } ],      \"model\" : {        \"price\" : 6000000,        \"name\" : \"A8\",        \"id\" : 3,        \"make\" : {          \"name\" : \"Audi\",          \"id\" : 3        }      }    },    \"client\" : {      \"name\" : \"Bogdan\",      \"id\" : 3    },    \"id\" : 4,    \"status\" : \"ACCEPTED\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "updateOrder", notes = "Update the order in the database", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order was successfully changed", response = Order.class),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/clients/{client_id}/orders/{order_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Order> updateOrder(@ApiParam(value = "Client id",required=true) @PathVariable("client_id") Long clientId,@ApiParam(value = "Client id",required=true) @PathVariable("order_id") Long orderId,@ApiParam(value = ""  )  @Valid @RequestBody OrderRequest orderRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"car\" : {    \"options\" : [ {      \"price\" : 65000,      \"name\" : \"Спортивный аэродинамический обвес\",      \"id\" : 3    }, {      \"price\" : 65000,      \"name\" : \"Спортивный аэродинамический обвес\",      \"id\" : 3    } ],    \"model\" : {      \"price\" : 6000000,      \"name\" : \"A8\",      \"id\" : 3,      \"make\" : {        \"name\" : \"Audi\",        \"id\" : 3      }    }  },  \"client\" : {    \"name\" : \"Bogdan\",    \"id\" : 3  },  \"id\" : 4,  \"status\" : \"ACCEPTED\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
